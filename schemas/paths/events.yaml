get:
  tags:
    - Events
  operationId: 'searchEvents'
  summary: Search events
  description: |
    ## Search

    The `/v4/events` endpoint provides a convenient way to search for past events based on specific parameters. Typical use cases and queries include:

    - Searching for events associated with a single `event_id` within a time range to get historical behavior of a visitor.
    - Searching for events associated with a single `linked_id` within a time range to get all events associated with your internal account identifier.
    - Excluding all bot traffic from the query (`good` and `bad` bots)

    If you don't provide `start` or `end` parameters, the default search range is the **last 7 days**.

    ### Filtering events with the`suspect` flag

    The `/v4/events` endpoint unlocks a powerful method for fraud protection analytics. The `suspect` flag is exposed in all events where it was previously set by the update API.

    You can also apply the `suspect` query parameter as a filter to find all potentially fraudulent activity that you previously marked as `suspect`. This helps identify patterns of fraudulent behavior.

    Smart Signals not activated for your workspace or are not included in the response.
  parameters:
    - name: limit
      in: query
      required: false
      schema:
        type: integer
        format: int32
        minimum: 1
        maximum: 100
        default: 10
        example: 10
      description: |
        Limit the number of events returned.
    - name: pagination_key
      in: query
      schema:
        type: string
      description: |
        Use `pagination_key` to get the next page of results.

        When more results are available (e.g., you requested up to 100 results for your query using `limit`, but there are more than 100 events total matching your request), the `pagination_key` field is added to the response. The key corresponds to the `timestamp` of the last returned event. In the following request, use that value in the `pagination_key` parameter to get the next page of results:

        1. First request, returning most recent 200 events: `GET api-base-url/events?limit=100`
        2. Use `response.pagination_key` to get the next page of results: `GET api-base-url/events?limit=100&pagination_key=1740815825085`
      # example: 1740815825085
    - name: visitor_id
      in: query
      schema:
        type: string
      description: |
        Unique [visitor identifier](https://dev.fingerprint.com/reference/get-function#visitorid) issued by Fingerprint Identification and all active Smart Signals.
        Filter for events matching this `visitor_id`.
    - name: bot
      in: query
      schema:
        type: string
        enum:
          - all
          - good
          - bad
          - none
      description: |
        Filter events by the Bot Detection result, specifically:
          `all` - events where any kind of bot was detected.
          `good` - events where a good bot was detected.
          `bad` - events where a bad bot was detected.
          `none` - events where no bot was detected.
        > Note: When using this parameter, only events with the `botd.bot` property set to a valid value are returned. Events without a `botd` Smart Signal result are left out of the response.
    - name: ip_address
      in: query
      schema:
        type: string
      description: |
        Filter events by IP address or IP range (if CIDR notation is used). If CIDR notation is not used, a /32 for IPv4 or /128 for IPv6 is assumed.
        Examples of range based queries: 10.0.0.0/24, 192.168.0.1/32
    - name: linked_id
      in: query
      schema:
        type: string
      description: |
        Filter events by your custom identifier.

        You can use [linked Ids](https://dev.fingerprint.com/reference/get-function#linkedid) to associate identification requests with your own identifier, for example, session Id, purchase Id, or transaction Id. You can then use this `linked_id` parameter to retrieve all events associated with your custom identifier.
      # example: someId
    - name: url
      in: query
      schema:
        type: string
      description: |
        Filter events by the URL (`url` property) associated with the event.
    - name: origin
      in: query
      schema:
        type: string
      description: |
        Filter events by the origin field of the event. Origin could be the website domain or mobile app bundle ID (eg: com.foo.bar)
    - name: start
      in: query
      schema:
        type: integer
        format: int64
      description: |
        Filter events with a timestamp greater than the start time, in Unix time (milliseconds).
    - name: end
      in: query
      schema:
        type: integer
        format: int64
      description: |
        Filter events with a timestamp smaller than the end time, in Unix time (milliseconds).
    - name: reverse
      in: query
      schema:
        type: boolean
      description: |
        Sort events in reverse timestamp order.
    - name: suspect
      in: query
      schema:
        type: boolean
      description: |
        Filter events previously tagged as suspicious via the [Update API](https://dev.fingerprint.com/reference/updateevent).
        > Note: When using this parameter, only events with the `suspect` property explicitly set to `true` or `false` are returned. Events with undefined `suspect` property are left out of the response.
    - name: vpn
      in: query
      schema:
        type: boolean
      description: |
        Filter events by VPN Detection result.
        > Note: When using this parameter, only events with the `vpn` property set to `true` or `false` are returned. Events without a `vpn` Smart Signal result are left out of the response.
    - name: virtual_machine
      in: query
      schema:
        type: boolean
      description: |
        Filter events by Virtual Machine Detection result.
        > Note: When using this parameter, only events with the `virtual_machine` property set to `true` or `false` are returned. Events without a `virtual_machine` Smart Signal result are left out of the response.
    - name: tampering
      in: query
      schema:
        type: boolean
      description: |
        Filter events by Browser Tampering Detection result.
        > Note: When using this parameter, only events with the `tampering.result` property set to `true` or `false` are returned. Events without a `tampering` Smart Signal result are left out of the response.
    - name: anti_detect_browser
      in: query
      schema:
        type: boolean
      description: |
        Filter events by Anti-detect Browser Detection result.
        > Note: When using this parameter, only events with the `tampering.anti_detect_browser` property set to `true` or `false` are returned. Events without a `tampering` Smart Signal result are left out of the response.
    - name: incognito
      in: query
      schema:
        type: boolean
      description: |
        Filter events by Browser Incognito Detection result.
        > Note: When using this parameter, only events with the `incognito` property set to `true` or `false` are returned. Events without an `incognito` Smart Signal result are left out of the response.
    - name: privacy_settings
      in: query
      schema:
        type: boolean
      description: |
        Filter events by Privacy Settings Detection result.
        > Note: When using this parameter, only events with the `privacy_settings` property set to `true` or `false` are returned. Events without a `privacy_settings` Smart Signal result are left out of the response.
    - name: jailbroken
      in: query
      schema:
        type: boolean
      description: |
        Filter events by Jailbroken Device Detection result.
        > Note: When using this parameter, only events with the `jailbroken` property set to `true` or `false` are returned. Events without a `jailbroken` Smart Signal result are left out of the response.
    - name: frida
      in: query
      schema:
        type: boolean
      description: |
        Filter events by Frida Detection result.
        > Note: When using this parameter, only events with the `frida` property set to `true` or `false` are returned. Events without a `frida` Smart Signal result are left out of the response.
    - name: factory_reset
      in: query
      schema:
        type: boolean
      description: |
        Filter events by Factory Reset Detection result.
        > Note: When using this parameter, only events with a `factory_reset` time. Events without a `factory_reset` Smart Signal result are left out of the response.
    - name: cloned_app
      in: query
      schema:
        type: boolean
      description: |
        Filter events by Cloned App Detection result.
        > Note: When using this parameter, only events with the `cloned_app` property set to `true` or `false` are returned. Events without a `cloned_app` Smart Signal result are left out of the response.
    - name: emulator
      in: query
      schema:
        type: boolean
      description: |
        Filter events by Android Emulator Detection result.
        > Note: When using this parameter, only events with the `emulator` property set to `true` or `false` are returned. Events without an `emulator` Smart Signal result are left out of the response.
    - name: root_apps
      in: query
      schema:
        type: boolean
      description: |
        Filter events by Rooted Device Detection result.
        > Note: When using this parameter, only events with the `root_apps` property set to `true` or `false` are returned. Events without a `root_apps` Smart Signal result are left out of the response.
    - name: vpn_confidence
      in: query
      schema:
        type: string
        enum:
          - high,
          - medium
          - low
      description: |
        Filter events by VPN Detection result confidence level.
        `high` - events with high VPN Detection confidence.
        `medium` - events with medium VPN Detection confidence.
        `low` - events with low VPN Detection confidence.
        > Note: When using this parameter, only events with the `vpn.confidence` property set to a valid value are returned. Events without a `vpn` Smart Signal result are left out of the response.
    - name: min_suspect_score
      in: query
      schema:
        type: number
        format: float
      description: |
        Filter events with Suspect Score result above a provided minimum threshold.
        > Note: When using this parameter, only events where the `suspect_score` property set to a value exceeding your threshold are returned. Events without a `suspect_score` Smart Signal result are left out of the response.
    - name: developer_tools
      in: query
      schema:
        type: boolean
      description: |
        Filter events by Developer Tools detection result.
        > Note: When using this parameter, only events with the `developer_tools` property set to `true` or `false` are returned. Events without a `developer_tools` Smart Signal result are left out of the response.
    - name: location_spoofing
      in: query
      schema:
        type: boolean
      description: |
        Filter events by Location Spoofing detection result.
        > Note: When using this parameter, only events with the `location_spoofing` property set to `true` or `false` are returned. Events without a `location_spoofing` Smart Signal result are left out of the response.
    - name: mitm_attack
      in: query
      schema:
        type: boolean
      description: |
        Filter events by MITM (Man-in-the-Middle) Attack detection result.
        > Note: When using this parameter, only events with the `mitm_attack` property set to `true` or `false` are returned. Events without a `mitm_attack` Smart Signal result are left out of the response.
    - name: proxy
      in: query
      schema:
        type: boolean
      description: |
        Filter events by Proxy detection result.
        > Note: When using this parameter, only events with the `proxy` property set to `true` or `false` are returned. Events without a `proxy` Smart Signal result are left out of the response.
    - name: sdk_version
      in: query
      schema:
        type: string
      description: |
        Filter events by a specific SDK version associated with the identification event (`sdk.version` property). Example: `3.11.14`
    - name: sdk_platform
      in: query
      schema:
        type: string
        enum:
          - js
          - android
          - ios
      description: |
        Filter events by the SDK Platform associated with the identification event (`sdk.platform` property) .
        `js` - Javascript agent (Web).
        `ios` - Apple iOS based devices.
        `android` - Android based devices.
    - name: environment
      in: query
      description: |
        Filter for events by providing one or more environment IDs (`environment_id` property).
      required: false
      schema:
        type: array
        items:
          type: string
      # style defines how multiple values are delimited. See https://swagger.io/docs/specification/v3_0/serialization/ for info on `style` and `explode`
      # explode (is true by default, with style: form) specifies whether arrays and objects should generate separate parameters for each array item or object property.
      style: form
    - name: total_hits
      in: query
      schema:
        type: integer
        format: int64
        minimum: 1
        maximum: 1000
      description: |
        When set, the response will include a `total_hits` property with a count of total query matches across all pages, up to the specified limit.
  responses:
    '200':
      description: Events matching the filter(s).
      content:
        application/json:
          schema:
            $ref: '../components/schemas/EventSearch.yaml'
          examples:
            200-ok:
              summary: Example results
              externalValue: 'examples/events/search/get_event_search_200.json'
    '403':
      description: Forbidden. Access to this API is denied.
      content:
        application/json:
          schema:
            $ref: '../components/schemas/error/ErrorResponse.yaml'
          examples:
            403-secret-api-key-required:
              summary: Error response when the secret API key was not provided.
              externalValue: 'examples/errors/403_secret_api_key_required.json'
            403-secret-api-key-not-found:
              summary: Error response when the provided secret API key does not exist.
              externalValue: 'examples/errors/403_secret_api_key_not_found.json'
            403-wrong-region:
              summary: Error response when the API region does not match the region of your Fingerprint workspace.
              externalValue: 'examples/errors/403_wrong_region.json'
    '400':
      description: Bad request. One or more supplied search parameters are invalid, or a required parameter is missing.
      content:
        application/json:
          schema:
            $ref: '../components/schemas/error/ErrorResponse.yaml'
          examples:
            400-limit-invalid:
              summary: Error response when no limit is supplied, or is invalid.
              externalValue: 'examples/errors/400_limit_invalid.json'
            400-ip-address-invalid:
              summary: Error response when an invalid IP address is supplied, or is not using CIDR notation.
              externalValue: 'examples/errors/400_ip_address_invalid.json'
            400-bot-type-invalid:
              summary: Error response when an invalid bot type is specified, must be one of `good`, `bad`, `all`, or `none`.
              externalValue: 'examples/errors/400_bot_type_invalid.json'
            400-reverse-invalid:
              summary: Error response when the reverse parameter is invalid.
              externalValue: 'examples/errors/400_reverse_invalid.json'
            400-start-time-invalid:
              summary: Error response when an invalid start time is supplied.
              externalValue: 'examples/errors/400_start_time_invalid.json'
            400-end-time-invalid:
              summary: Error response when an invalid end time is supplied.
              externalValue: 'examples/errors/400_end_time_invalid.json'
            400-visitor-id-invalid:
              summary: Error response when an invalid visitor Id is supplied.
              externalValue: 'examples/errors/400_visitor_id_invalid.json'
            400-linked-id-invalid:
              summary: Error response when an invalid (too large) linked Id is supplied.
              externalValue: 'examples/errors/400_linked_id_invalid.json'
            400-pagination-key-invalid:
              summary: Error response when an invalid pagination key is supplied.
              externalValue: 'examples/errors/400_pagination_key_invalid.json'
    '500':
      description: Application error.
      content:
        application/json:
          schema:
            $ref: '../components/schemas/error/ErrorResponse.yaml'
          examples:
            500-error:
              summary: Request failed
              externalValue: 'examples/errors/500_internal_server_error.json'
