get:
  tags:
    - Visitors
  operationId: 'getVisits'
  summary: Get visits by visitor ID
  description: |
    Get a history of visits (identification events) for a specific `visitorId`. Use the `visitorId` as a URL path parameter.
    Only information from the _Identification_ product is returned.
    
    #### Headers
    
    * `Retry-After` — Present in case of `429 Too many requests`. Indicates how long you should wait before making a follow-up request. The value is non-negative decimal integer indicating the seconds to delay after the response is received.
  x-flatten-optional-params: true
  parameters:
    - name: visitor_id
      in: path
      required: true
      schema:
        type: string
      description: Unique [visitor identifier](https://dev.fingerprint.com/reference/get-function#visitorid) issued by Fingerprint Pro.
      # example: uYIm7Ksp5rf00SllPhFp
    - name: request_id
      in: query
      schema:
        type: string
      description: |
        Filter visits by `requestId`. 
        
        Every identification request has a unique identifier associated with it called `requestId`. This identifier is returned to the client in the identification [result](https://dev.fingerprint.com/reference/get-function#requestid). When you filter visits by `requestId`, only one visit will be returned.
      x-go-skip-pointer: true
      # example: 1654815516083.OX6kx8
    - name: linked_id
      in: query
      schema:
        type: string
      description: |
        Filter visits by your custom identifier. 
        
        You can use [`linkedId`](https://dev.fingerprint.com/reference/get-function#linkedid) to associate identification requests with your own identifier, for example: session ID, purchase ID, or transaction ID. You can then use this `linked_id` parameter to retrieve all events associated with your custom identifier.
      x-go-skip-pointer: true
      # example: some_id
    - name: limit
      in: query
      schema:
        type: integer
        format: int32
        minimum: 0
        # default: 0
        # example: 10
      description: |
        Limit scanned results. 
        
        For performance reasons, the API first scans some number of events before filtering them. Use `limit` to specify how many events are scanned before they are filtered by `requestId` or `linkedId`. Results are always returned sorted by the timestamp (most recent first).
        By default, the most recent 100 visits are scanned, the maximum is 500.
      x-go-skip-pointer: true
    - name: paginationKey
      in: query
      schema:
        type: string
      description: |
        Use `paginationKey` to get the next page of results. 
        
        When more results are available (e.g., you requested 200 results using `limit` parameter, but a total of 600 results are available), the `paginationKey` top-level attribute is added to the response. The key corresponds to the `requestId` of the last returned event. In the following request, use that value in the `paginationKey` parameter to get the next page of results:
        
        1. First request, returning most recent 200 events: `GET api-base-url/visitors/:visitorId?limit=200`
        2. Use `response.paginationKey` to get the next page of results: `GET api-base-url/visitors/:visitorId?limit=200&paginationKey=1683900801733.Ogvu1j`
        
        Pagination happens during scanning and before filtering, so you can get less visits than the `limit` you specified with more available on the next page. When there are no more results available for scanning, the `paginationKey` attribute is not returned.
      x-go-skip-pointer: true
      # example: 1683900801733.Ogvu1j
    - name: before
      in: query
      deprecated: true
      schema:
        type: integer
        format: int64
        minimum: 0
        # default: 0
        # example: 1654815517198
      description: |
        ⚠️ Deprecated pagination method, please use `paginationKey` instead. Timestamp (in milliseconds since epoch) used to paginate results.
      x-go-skip-pointer: true
  responses:
    '200':
      description: OK.
      content:
        application/json:
          schema:
            $ref: '../components/schemas/VisitorsGetResponse.yaml'
          examples:
            200-limit-1:
              summary: Example response with limit=1
              externalValue: 'examples/get_visitors_200_limit_1.json'
            200-limit-500:
              summary: Example response with limit=500
              externalValue: 'examples/get_visitors_200_limit_500.json'
    '400':
      description: Bad request. The visitor ID or query parameters are missing or in the wrong format.
      content:
        application/json:
          schema:
            $ref: '../components/schemas/ErrorPlainResponse.yaml'
          examples:
            400-bad-request:
              summary: Error response when the visitor ID or query parameters are missing or in the wrong format.
              externalValue: 'examples/get_visitors_400_bad_request.json'
    '403':
      description: Forbidden. Access to this API is denied.
      content:
        application/json:
          schema:
            $ref: '../components/schemas/ErrorPlainResponse.yaml'
          examples:
            403-forbidden:
              summary: Error response when the secret API Key is missing or incorrect.
              externalValue: 'examples/get_visitors_403_forbidden.json'
    '429':
      description: Too Many Requests. The request is throttled.
      headers:
        Retry-After:
          description: Indicates how many seconds you should wait before attempting the next request.
          schema:
            type: integer
            format: int32
            minimum: 0
      content:
        application/json:
          schema:
            $ref: '../components/schemas/ErrorPlainResponse.yaml'
          examples:
            429-too-many-requests:
              summary: Error response when the limit on the provided secret API key requests per second has been exceeded.
              externalValue: 'examples/get_visitors_429_too_many_requests.json'
delete:
  tags:
    - Visitors
  operationId: 'deleteVisitorData'
  summary: Delete data by visitor ID
  description: |
    Request deleting all data associated with the specified visitor ID. This API is useful for compliance with privacy regulations.
    ### Which data is deleted?
    - Browser (or device) properties
    - Identification requests made from this browser (or device)

    #### Browser (or device) properties
    - Represents the data that Fingerprint collected from this specific browser (or device) and everything inferred and derived from it.
    - Upon request to delete, this data is deleted asynchronously (typically within a few minutes) and it will no longer be used to identify this browser (or device) for your [Fingerprint Workspace](https://dev.fingerprint.com/docs/glossary#fingerprint-workspace).

    #### Identification requests made from this browser (or device)
    - Fingerprint stores the identification requests made from a browser (or device) for up to 30 (or 90) days depending on your plan. To learn more, see [Data Retention](https://dev.fingerprint.com/docs/regions#data-retention).
    - Upon request to delete, the identification requests that were made by this browser
      - Within the past 10 days are deleted within 24 hrs.
      - Outside of 10 days are allowed to purge as per your data retention period.

    ### Corollary
    After requesting to delete a visitor ID,
    - If the same browser (or device) requests to identify, it will receive a different visitor ID.
    - If you request [`/events` API](https://dev.fingerprint.com/reference/getevent) with a `request_id` that was made outside of the 10 days, you will still receive a valid response.
    - If you request [`/visitors` API](https://dev.fingerprint.com/reference/getvisits) for the deleted visitor ID, the response will include identification requests that were made outside of those 10 days.

    ### Interested?
    Please [contact our support team](https://fingerprint.com/support/) to enable it for you. Otherwise, you will receive a 403.
  parameters:
    - name: visitor_id
      in: path
      required: true
      schema:
        type: string
      description: The [visitor ID](https://dev.fingerprint.com/reference/get-function#visitorid) you want to delete.
  responses:
    '200':
      description: OK. The visitor ID is scheduled for deletion.
    '400':
      description: Bad request. The visitor ID parameter is missing or in the wrong format.
      content:
        application/json:
          schema:
            $ref: '../components/schemas/ErrorResponse.yaml'
          examples:
            400-visitor-id-required:
              summary: Error response when the request does not include a visitor ID.
              externalValue: 'examples/errors/400_visitor_id_required.json'
            400-visitor-id-invalid:
              summary: Error response when the visitor ID is incorrectly formatted.
              externalValue: 'examples/errors/400_visitor_id_invalid.json'
    '403':
      description: Forbidden. Access to this API is denied.
      content:
        application/json:
          schema:
            $ref: '../components/schemas/ErrorResponse.yaml'
          examples:
            403-token-required:
              summary: Error response when the secret API key was not provided.
              externalValue: 'examples/errors/403_token_required.json'
            403-token-not-found:
              summary: Error response when the provided secret API key does not exist.
              externalValue: 'examples/errors/403_token_not_found.json'
            403-wrong-region:
              summary: Error response when the API region is different from the region, the calling application is configured with.
              externalValue: 'examples/errors/403_wrong_region.json'
            403-subscription-not-active:
              summary: Error response when the subscription is not active.
              externalValue: 'examples/errors/403_subscription_not_active.json'
            403-feature-not-enabled:
              summary: Error response when this feature is not enabled for a subscription.
              externalValue: 'examples/errors/403_feature_not_enabled.json'
    '404':
      description: Not found. The visitor ID cannot be found in this application's data.
      content:
        application/json:
          schema:
            $ref: '../components/schemas/ErrorResponse.yaml'
          examples:
            404-visitor-not-found:
              summary: Error response when the visitor ID cannot be found in this application's data.
              externalValue: 'examples/errors/404_visitor_not_found.json'
    '429':
      description: Too Many Requests. The request is throttled.
      content:
        application/json:
          schema:
            $ref: '../components/schemas/ErrorResponse.yaml'
          examples:
            429-too-many-requests:
              summary: Error response when the limit on the provided secret API key requests per second has been exceeded.
              externalValue: 'examples/errors/429_too_many_requests.json'
